import 'dart:math';

import 'package:confetti/confetti.dart';
import 'package:flutter/material.dart';


class ConfettiView extends StatefulWidget {
  const ConfettiView({super.key});

  @override
  State<ConfettiView> createState() => _ConfettiViewState();
}

class _ConfettiViewState extends State<ConfettiView> {
  late ConfettiController _controllerCenter;

  @override
  void initState() {
    super.initState();
    _controllerCenter = ConfettiController(duration: const Duration(seconds: 10));
  }

  @override
  void dispose() {
    _controllerCenter.dispose();
    super.dispose();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    WidgetsBinding.instance.addPostFrameCallback((_) => _controllerCenter.play());
  }

  Path drawPuzzle(Size size) {
    final presets = [
          (Size s) => drawPuzzle1,
          (Size s) => drawPuzzle2,
          (Size s) => drawPuzzle3,
    ];
    final rnd = Random();
    final path = (presets[rnd.nextInt(presets.length)])(size);
    return path(size);
  }

  Path drawPuzzle1(Size size) {
    final minX = 4787.148438;
    final minY = 13171.40625;
    final width = 4685.742187;
    final height = 5768.398438;
    final sx = size.width / width;
    final sy = size.height / height;
    final s = sx < sy ? sx : sy;
    final dx = -minX;
    final dy = -minY;
    final path = Path();
    path.moveTo((7928.359375+dx)*s, (13171.992188+dy)*s);
    path.cubicTo((8234.570312+dx)*s, (13171.40625+dy)*s, (8483.046875+dx)*s, (13394.21875+dy)*s, (8483.59375+dx)*s, (13668.398438+dy)*s);
    path.cubicTo((8483.59375+dx)*s, (13766.40625+dy)*s, (8451.09375+dx)*s, (13857.617188+dy)*s, (8396.445312+dx)*s, (13935.0+dy)*s);
    path.lineTo((8400.078125+dx)*s, (13935.0+dy)*s);
    path.cubicTo((8155.703125+dx)*s, (14201.484375+dy)*s, (8181.992188+dx)*s, (14419.609375+dy)*s, (8440.273438+dx)*s, (14495.898438+dy)*s);
    path.lineTo((9297.617188+dx)*s, (14495.898438+dy)*s);
    path.cubicTo((9394.023438+dx)*s, (14495.898438+dy)*s, (9472.890625+dx)*s, (14574.804688+dy)*s, (9472.890625+dx)*s, (14671.210938+dy)*s);
    path.lineTo((9472.890625+dx)*s, (17327.148438+dy)*s);
    path.cubicTo((9472.890625+dx)*s, (17423.570312+dy)*s, (9394.023438+dx)*s, (17502.445312+dy)*s, (9297.617188+dx)*s, (17502.445312+dy)*s);
    path.lineTo((8440.273438+dx)*s, (17502.445312+dy)*s);
    path.cubicTo((8181.992188+dx)*s, (17578.734375+dy)*s, (8155.703125+dx)*s, (17796.859375+dy)*s, (8400.078125+dx)*s, (18063.34375+dy)*s);
    path.lineTo((8396.445312+dx)*s, (18063.34375+dy)*s);
    path.cubicTo((8451.09375+dx)*s, (18140.742188+dy)*s, (8483.59375+dx)*s, (18231.953125+dy)*s, (8483.59375+dx)*s, (18329.945312+dy)*s);
    path.cubicTo((8483.046875+dx)*s, (18604.125+dy)*s, (8234.570312+dx)*s, (18826.953125+dy)*s, (7928.359375+dx)*s, (18826.367188+dy)*s);
    path.cubicTo((7621.5625+dx)*s, (18826.953125+dy)*s, (7373.085938+dx)*s, (18604.125+dy)*s, (7373.632812+dx)*s, (18329.945312+dy)*s);
    path.cubicTo((7373.632812+dx)*s, (18231.953125+dy)*s, (7406.125+dx)*s, (18140.742188+dy)*s, (7460.78125+dx)*s, (18063.34375+dy)*s);
    path.lineTo((7457.148438+dx)*s, (18063.34375+dy)*s);
    path.cubicTo((7701.523438+dx)*s, (17796.859375+dy)*s, (7675.234375+dx)*s, (17578.734375+dy)*s, (7416.953125+dx)*s, (17502.445312+dy)*s);
    path.lineTo((6559.609375+dx)*s, (17502.445312+dy)*s);
    path.cubicTo((6463.203125+dx)*s, (17502.445312+dy)*s, (6384.328125+dx)*s, (17423.570312+dy)*s, (6384.328125+dx)*s, (17327.148438+dy)*s);
    path.lineTo((6384.328125+dx)*s, (14671.210938+dy)*s);
    path.cubicTo((6384.328125+dx)*s, (14574.804688+dy)*s, (6463.203125+dx)*s, (14495.898438+dy)*s, (6559.609375+dx)*s, (14495.898438+dy)*s);
    path.lineTo((7416.953125+dx)*s, (14495.898438+dy)*s);
    path.cubicTo((7675.234375+dx)*s, (14419.609375+dy)*s, (7701.523438+dx)*s, (14201.484375+dy)*s, (7457.148438+dx)*s, (13935.0+dy)*s);
    path.lineTo((7460.78125+dx)*s, (13935.0+dy)*s);
    path.cubicTo((7406.125+dx)*s, (13857.617188+dy)*s, (7373.632812+dx)*s, (13766.40625+dy)*s, (7373.632812+dx)*s, (13668.398438+dy)*s);
    path.cubicTo((7373.085938+dx)*s, (13394.21875+dy)*s, (7621.5625+dx)*s, (13171.40625+dy)*s, (7928.359375+dx)*s, (13171.992188+dy)*s);
    path.close();
    return path;
  }

  Path drawPuzzle2(Size size) {
    const minX = 5180.195312, maxX = 10800.585938;
    const minY = 17693.203125, maxY = 20787.5;
    const sx0 = 0.1, sy0 = -0.1, ty0 = 2400.0;
    final w0 = (maxX - minX) * sx0.abs();
    final h0 = (maxY - minY) * sx0.abs();
    final s = min(size.width / w0, size.height / h0);
    final ox = minX * sx0;
    final oy = ty0 + sy0 * maxY;
    double X(num x) => (x * sx0 - ox) * s;
    double Y(num y) => (ty0 + sy0 * y - oy) * s;

    final p = Path();
    p.moveTo(X(5180.195312), Y(19255.703125));
    p.cubicTo(X(5191.679688), Y(19486.601562), X(5368.476562), Y(19690.703125), X(5576.484375), Y(19729.101562));
    p.cubicTo(X(5666.992188), Y(19745.703125), X(5745.859375), Y(19727.8125), X(5796.796875), Y(19710.507812));
    p.lineTo(X(5796.796875), Y(19714.609375));
    p.cubicTo(X(6063.320312), Y(19470.78125), X(6281.40625), Y(19496.601562), X(6357.695312), Y(19754.882812));
    p.lineTo(X(6357.695312), Y(20612.1875));
    p.cubicTo(X(6357.695312), Y(20708.59375), X(6436.5625), Y(20787.5), X(6532.96875), Y(20787.5));
    p.lineTo(X(7323.320312), Y(20787.5));
    p.cubicTo(X(7645), Y(20731.289062), X(7698.085938), Y(20499.804688), X(7433.632812), Y(20210.585938));
    p.lineTo(X(7448.59375), Y(20210.585938));
    p.cubicTo(X(7393.4375), Y(20133.28125), X(7361.445312), Y(20041.992188), X(7361.445312), Y(19944.101562));
    p.cubicTo(X(7361.445312), Y(19669.804688), X(7610.46875), Y(19447.109375), X(7916.679688), Y(19447.109375));
    p.cubicTo(X(8222.929688), Y(19447.109375), X(8471.40625), Y(19669.804688), X(8471.40625), Y(19944.101562));
    p.cubicTo(X(8471.40625), Y(20041.992188), X(8439.453125), Y(20133.28125), X(8384.296875), Y(20210.585938));
    p.lineTo(X(8387.890625), Y(20210.585938));
    p.cubicTo(X(8123.4375), Y(20499.296875), X(8176.015625), Y(20731.289062), X(8497.695312), Y(20787.5));
    p.lineTo(X(9279.257812), Y(20787.5));
    p.cubicTo(X(9375.664062), Y(20787.5), X(9454.53125), Y(20708.59375), X(9454.53125), Y(20612.1875));
    p.lineTo(X(9454.53125), Y(19861.601562));
    p.cubicTo(X(9498.90625), Y(19506.914062), X(9737.578125), Y(19440.390625), X(10037.109375), Y(19714.609375));
    p.lineTo(X(10037.109375), Y(19711.015625));
    p.cubicTo(X(10114.414062), Y(19766.210938), X(10205.703125), Y(19798.203125), X(10303.59375), Y(19798.203125));
    p.cubicTo(X(10577.890625), Y(19798.203125), X(10800.585938), Y(19549.21875), X(10800.585938), Y(19242.890625));
    p.lineTo(X(10800.585938), Y(19241.914062));
    p.cubicTo(X(10800.585938), Y(18935.195312), X(10577.890625), Y(18686.71875), X(10303.59375), Y(18686.71875));
    p.cubicTo(X(10205.703125), Y(18686.71875), X(10114.414062), Y(18718.59375), X(10037.109375), Y(18773.789062));
    p.lineTo(X(10037.109375), Y(18770.195312));
    p.cubicTo(X(9737.578125), Y(19044.414062), X(9499.414062), Y(18977.382812), X(9454.53125), Y(18623.203125));
    p.lineTo(X(9454.53125), Y(17872.617188));
    p.cubicTo(X(9454.53125), Y(17776.210938), X(9375.664062), Y(17697.890625), X(9279.257812), Y(17697.304688));
    p.lineTo(X(8532.265625), Y(17693.203125));
    p.cubicTo(X(8295.625), Y(17768.007812), X(8371.40625), Y(17898.398438), X(8471.914062), Y(18062.304688));
    p.cubicTo(X(8668.359375), Y(18383.984375), X(8635.859375), Y(18717.617188), X(8291.484375), Y(18942.890625));
    p.cubicTo(X(8201.796875), Y(19001.71875), X(8104.84375), Y(19041.40625), X(8006.40625), Y(19046.992188));
    p.cubicTo(X(7565.078125), Y(19072.304688), X(7135.664062), Y(18693.398438), X(7305.78125), Y(18252.109375));
    p.cubicTo(X(7350.117188), Y(18137.617188), X(7427.96875), Y(18032.382812), X(7465.078125), Y(17942.695312));
    p.cubicTo(X(7478.476562), Y(17910.78125), X(7486.210938), Y(17880.898438), X(7485.703125), Y(17852.5));
    p.cubicTo(X(7484.140625), Y(17790.703125), X(7441.875), Y(17738.085938), X(7322.265625), Y(17696.796875));
    p.lineTo(X(6531.953125), Y(17696.796875));
    p.cubicTo(X(6435.546875), Y(17696.796875), X(6356.640625), Y(17775.703125), X(6356.640625), Y(17872.109375));
    p.lineTo(X(6356.640625), Y(18729.414062));
    p.cubicTo(X(6280.351562), Y(18987.695312), X(6062.304688), Y(19013.515625), X(5795.742188), Y(18769.6875));
    p.lineTo(X(5795.742188), Y(18773.28125));
    p.cubicTo(X(5744.726562), Y(18750.117188), X(5653.632812), Y(18718.59375), X(5548.945312), Y(18738.28125));
    p.cubicTo(X(5332.8125), Y(18779.101562), X(5168.359375), Y(19018.085938), X(5180.195312), Y(19255.703125));
    p.close();
    return p;
  }

  Path drawPuzzle3(Size size) {
    const minX = 1800.117188, maxX = 6222.421875;
    const minY = 17686.09375, maxY = 22371.796875;
    const sx0 = 0.1, sy0 = -0.1, ty0 = 2400.0;
    final w0 = (maxX - minX) * sx0.abs();
    final h0 = (maxY - minY) * sx0.abs();
    final s = (size.width / w0 < size.height / h0) ? size.width / w0 : size.height / h0;
    final ox = minX * sx0;
    final oy = ty0 + sy0 * maxY;
    double X(num x) => (x * sx0 - ox) * s;
    double Y(num y) => (ty0 + sy0 * y - oy) * s;

    final p = Path();
    p.moveTo(X(3124.53125), Y(17861.40625));
    p.cubicTo(X(3124.53125), Y(17764.882812), X(3203.398438), Y(17686.09375), X(3299.804688), Y(17686.09375));
    p.lineTo(X(4091.679688), Y(17686.09375));
    p.cubicTo(X(4180.3125), Y(17701.601562), X(4248.515625), Y(17730.390625), X(4295.351562), Y(17770.117188));
    p.cubicTo(X(4323.671875), Y(17848.59375), X(4272.1875), Y(17967.695312), X(4153.867188), Y(18096.914062));
    p.cubicTo(X(4142.226562), Y(18109.609375), X(4135.46875), Y(18125.585938), X(4134.101562), Y(18142.109375));
    p.cubicTo(X(4115.703125), Y(18195.3125), X(4090.742188), Y(18290.390625), X(4102.8125), Y(18408.28125));
    p.cubicTo(X(4107.773438), Y(18456.71875), X(4126.5625), Y(18617.1875), X(4255.507812), Y(18754.804688));
    p.cubicTo(X(4273.203125), Y(18773.710938), X(4434.257812), Y(18940.3125), X(4679.335938), Y(18936.484375));
    p.cubicTo(X(4970.390625), Y(18931.992188), X(5218.398438), Y(18689.6875), X(5261.015625), Y(18426.601562));
    p.cubicTo(X(5280.429688), Y(18306.914062), X(5253.789062), Y(18204.609375), X(5230.898438), Y(18142.109375));
    p.cubicTo(X(5229.53125), Y(18125.585938), X(5222.773438), Y(18109.609375), X(5211.09375), Y(18096.914062));
    p.cubicTo(X(5092.65625), Y(17967.5), X(5041.210938), Y(17848.28125), X(5070), Y(17769.804688));
    p.cubicTo(X(5071.171875), Y(17766.601562), X(5072.578125), Y(17763.515625), X(5074.023438), Y(17760.390625));
    p.cubicTo(X(5120.195312), Y(17725.703125), X(5184.296875), Y(17700.3125), X(5265.585938), Y(17686.09375));
    p.lineTo(X(6047.148438), Y(17686.09375));
    p.cubicTo(X(6143.554688), Y(17686.09375), X(6222.421875), Y(17764.882812), X(6222.421875), Y(17861.40625));
    p.lineTo(X(6222.421875), Y(18612.5));
    p.cubicTo(X(6222.421875), Y(18682.5), X(6222.421875), Y(18752.5), X(6222.421875), Y(18822.382812));
    p.cubicTo(X(6206.679688), Y(18838.515625), X(6187.929688), Y(18851.09375), X(6165.429688), Y(18857.382812));
    p.cubicTo(X(6087.1875), Y(18879.101562), X(5971.25), Y(18826.601562), X(5847.34375), Y(18713.28125));
    p.cubicTo(X(5835.117188), Y(18701.992188), X(5819.84375), Y(18695.390625), X(5803.984375), Y(18693.710938));
    p.cubicTo(X(5713.828125), Y(18657.382812), X(5621.25), Y(18646.914062), X(5534.765625), Y(18663.203125));
    p.cubicTo(X(5283.164062), Y(18710.703125), X(5089.84375), Y(18978.203125), X(5103.828125), Y(19259.492188));
    p.cubicTo(X(5110.195312), Y(19386.992188), X(5160.78125), Y(19512.890625), X(5246.289062), Y(19613.984375));
    p.cubicTo(X(5331.5625), Y(19714.804688), X(5443.90625), Y(19782.382812), X(5562.617188), Y(19804.21875));
    p.cubicTo(X(5638.515625), Y(19818.203125), X(5716.640625), Y(19813.789062), X(5795.3125), Y(19791.09375));
    p.cubicTo(X(5814.492188), Y(19791.40625), X(5833.632812), Y(19784.492188), X(5848.398438), Y(19771.015625));
    p.cubicTo(X(5972.304688), Y(19657.695312), X(6088.242188), Y(19605.195312), X(6166.445312), Y(19626.914062));
    p.cubicTo(X(6188.476562), Y(19633.085938), X(6206.914062), Y(19645.3125), X(6222.421875), Y(19660.898438));
    p.cubicTo(X(6222.421875), Y(19727.304688), X(6222.421875), Y(19793.710938), X(6222.421875), Y(19860.117188));
    p.lineTo(X(6222.421875), Y(20608.085938));
    p.cubicTo(X(6222.421875), Y(20704.609375), X(6143.554688), Y(20783.398438), X(6047.148438), Y(20783.398438));
    p.lineTo(X(5297.539062), Y(20783.398438));
    p.cubicTo(X(5111.953125), Y(20808.203125), X(4989.765625), Y(20886.484375), X(4972.734375), Y(20999.414062));
    p.cubicTo(X(4928.945312), Y(21291.796875), X(5352.695312), Y(21464.492188), X(5106.289062), Y(21863.515625));
    p.cubicTo(X(4792.304688), Y(22371.796875), X(3875.15625), Y(21953.710938), X(4262.34375), Y(21324.804688));
    p.cubicTo(X(4422.65625), Y(21064.414062), X(4576.289062), Y(20843.203125), X(4058.710938), Y(20783.398438));
    p.lineTo(X(3300.3125), Y(20783.398438));
    p.cubicTo(X(3203.945312), Y(20783.398438), X(3125.039062), Y(20704.609375), X(3125.039062), Y(20608.203125));
    p.lineTo(X(3125.039062), Y(19753.90625));
    p.cubicTo(X(3048.75), Y(19495.585938), X(2830.664062), Y(19469.804688), X(2564.140625), Y(19713.710938));
    p.lineTo(X(2564.140625), Y(19698.710938));
    p.cubicTo(X(2486.796875), Y(19753.90625), X(2395.546875), Y(19785.898438), X(2297.617188), Y(19785.898438));
    p.cubicTo(X(2023.359375), Y(19785.898438), X(1800.625), Y(19536.914062), X(1800.625), Y(19230.585938));
    p.cubicTo(X(1800.117188), Y(18924.414062), X(2022.8125), Y(18675.898438), X(2297.109375), Y(18675.390625));
    p.cubicTo(X(2395.039062), Y(18675.390625), X(2486.289062), Y(18707.890625), X(2563.632812), Y(18762.5));
    p.lineTo(X(2563.632812), Y(18758.90625));
    p.cubicTo(X(2830.15625), Y(19003.28125), X(3048.242188), Y(18976.992188), X(3124.53125), Y(18718.710938));
    p.close();
    return p;
  }

  @override
  Widget build(BuildContext context) {
    return ConfettiWidget(
      confettiController: _controllerCenter,
      blastDirectionality: BlastDirectionality.explosive,
      shouldLoop: true,
      colors: const [Colors.green, Colors.blue, Colors.pink, Colors.orange, Colors.purple],
      maximumSize:Size(64, 64),
      createParticlePath: drawPuzzle,
    );
  }
}
